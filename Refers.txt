Reference
http://uwsgi-docs.readthedocs.io/en/latest/WSGIquickstart.html

Installation
-------------------------------------------------------------------------------
For Debin based
    apt-get install build-essential python-dev
    pip install uwsgi

-------------------------------------------------------------------------------
1. WSGI application

--------------------------------------------------------------------------------
## foobar.py

def application(env, start_response):
    start_response('200 OK', [('Content-Type', 'text/html')])
    return [b'Hello world']

Deploy it on HTTP port 9090

uwsgi --http :9090 --wsgi-file foobar.py --master --processes 4 --thread

________________________________________________________________________________

Nginx config

usually, lt looks like

    location / {
        include uwsgi_params;
        uwsgi_pass 127.0.0.1: 8080;
    }

That means pass every request to the serve bound to port 8080
Now spawn uWSGI to natively speak the uwsgi protocol

uwsgi --socket 127.0.0.1:8080 --wsgi-file foobar.py --master --processes 4 \
      --threads 2 --stats 127.0.0.1:9091

Note: Don't miss threads, or application will not work

________________________________________________________________________________

Automatically starting uWSGI on boot

Deploying Django project

First we define a xxx.ini file

[uwsgi]
socket = 127.0.0.1:8080
chdir = /dir/to/your_proj/
wsgi-file = your_proj/wsgi.py
processes = 4
threads = 2
stats = 127.0.0.1:9091

Just run: uwsgi xxx.ini
================================================================================

Deploying Flask

[uwsgi]
socket = 127.0.0.1:8080
chmod-socket = 664
#uid = user
#gid = group
chdir = /dir/to/your_proj/
module = wsgi:application
processes = 4
threads = 2
vacuum = true
die-on-term = true ## This is for uwsgi can kill the process


## myapp.py

from flask import Flask
app = Flask(__name__)

@app.route('/')
def index():
    return "<span style='color:red'> This is home page of flask</span>"

--------------------------------------------------------------------------------
uwsgi --socket 127.0.0.1:8080 --wsgi-file myapp.py --callable app --process 2\
      --threads 2 --stats 127.0.0.1:9091
--------------------------------------------------------------------------------

or in myapp.py, we define app with application, then "callable" can be ignored

Note on python threads

If you want to maintain Python threads support without starting multiple threads
for your application, just add the --enable-threads option
(or enable-threads = true in ini style).

________________________________________________________________________________

Virtualenvs

Add virtualenv = <path>

Security and availability

Always avoid running your uWSGI instances as root. You can drop privileges using
the uid and gid options:

[uwsgi]
https = :8080, foobar.crt, foobar.key
uid = foo
gid = bar
chdir = xxx
master = true
processes = 4

________________________________________________________________________________

Nginx Config

/etc/nginx/nginx.conf

Add line after
        include /etc/nginx/conf.d/*.conf;
    It looks like:
        include /etc/nginx/conf.d/*.conf;
        include /etc/nginx/sites-enabled/*;

    Or you can add your new conf file under:
        /etc/nginx/conf.d/

If choose sites-enabled:
    sudo mkdir -p /etc/nginx/sites-avaliable/
    sudo mkdir -p /etc/nginx/sites-enabled/

then add new config file in sites-avaliable/, say: my_proj.conf

config lines:

server {
        listen 9090;
        server_name localhost; # server_domin_or_IP;

        location / {
                include uwsgi_params;
                uwsgi_pass unix:/dir/to/my_proj/my_proj.sock;
        }

Next add symble link file:

sudo ln -s /etc/nginx/sites-avaliable/my_proj.conf /etc/nginx/sites-enabled/

If has static, config it in server:

server {
        listen 80;
        server_name localhost; # server_domin_or_IP;

        location /static/ {
            alias /dir/to/my_proj/static/;
        }

        location / {
                include uwsgi_params;
                uwsgi_pass unix:/dir/to/my_proj/my_proj.sock;
        }

Finally, try by restarting nginx
    sudo service nginx configtest

    No problems, do
    sudo service nginx restart

________________________________________________________________________________

Create Upstart file (Not available. Try else) 

sudo vim /etc/init/myApp.conf

    description "uWSGI instance to server myapp"

    start on runlevel [2345]
    stop on runlevel [!2345]

    setuid ***
    setgit www-data

    script
        cd /dir/to/my_proj
        . virtualenv/bin/activate   ## must be . instead of source
        uwsgi --ini myapp.ini
    end script

Next test it by
    sudo start myapp
    sudo stop myapp
